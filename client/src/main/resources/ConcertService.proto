syntax = "proto3";
option java_multiple_files = true;
package ds.tutorial.communication.grpc.generated;




message ConcertShow {
    string id = 1;
    string name = 2;
    string date = 3;
    string venue = 4;
    string description = 5;
    bool hasAfterParty = 6;
    repeated SeatTier seatTiers = 7;
    int32 afterPartyTickets = 8;
}


message SeatTier {
    string type = 1;
    double price = 2;
    int32 available = 3;
}


message AddConcertRequest {
    ConcertShow show = 1;
    bool isSentByPrimary = 2;
}


message AddConcertResponse {
    bool status = 1;
    string message = 2;
}


message UpdateConcertRequest {
    string showId = 1;
    ConcertShow updatedShow = 2;
    bool isSentByPrimary = 3;
}


message UpdateConcertResponse {
    bool status = 1;
    string message = 2;
}


message CancelConcertRequest {
    string showId = 1;
    bool isSentByPrimary = 2;
}


message CancelConcertResponse {
    bool status = 1;
    string message = 2;
}


message ListConcertsRequest {
}


message ListConcertsResponse {
    repeated ConcertShow shows = 1;
}


message GetConcertRequest {
    string showId = 1;
}


message GetConcertResponse {
    ConcertShow show = 1;
}


message ReserveTicketRequest {
    string showId = 1;
    string seatType = 2;
    int32 quantity = 3;
    bool includeAfterParty = 4;
    bool isSentByPrimary = 5;
    string customerId = 6;
}


message ReserveTicketResponse {
    bool status = 1;
    string reservationId = 2;
    string message = 3;
}


message UpdateTicketStockRequest {
    string showId = 1;
    string seatType = 2;
    int32 additionalTickets = 3;
    int32 additionalAfterPartyTickets = 4;
    bool isSentByPrimary = 5;
}


message UpdateTicketStockResponse {
    bool status = 1;
    string message = 2;
}


service ConcertOrganizerService {
    rpc addConcert(AddConcertRequest) returns (AddConcertResponse);
    rpc updateConcert(UpdateConcertRequest) returns (UpdateConcertResponse);
    rpc cancelConcert(CancelConcertRequest) returns (CancelConcertResponse);
}

service BoxOfficeService {
    rpc updateTicketStock(UpdateTicketStockRequest) returns (UpdateTicketStockResponse);
}

service CustomerService {
    rpc listConcerts(ListConcertsRequest) returns (ListConcertsResponse);
    rpc getConcert(GetConcertRequest) returns (GetConcertResponse);
    rpc reserveTicket(ReserveTicketRequest) returns (ReserveTicketResponse);
}